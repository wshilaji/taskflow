#pragma once

#include "task.hpp"
#include "../algorithm/partitioner.hpp"

/**
@file flow_builder.hpp
@brief flow builder include file
*/

namespace tf {

/**
@class FlowBuilder

@brief class to build a task dependency graph

The class provides essential methods to construct a task dependency graph
from which tf::Taskflow and tf::Subflow are derived.

*/
class FlowBuilder {

  friend class Executor;

  public:

  /**
  @brief constructs a flow builder with a graph
  */
  FlowBuilder(Graph& graph);
  /* std::函数声明
    template<bool B, class T = void>
    struct enable_if {};//  B 为 true，enable_if 将定义一个名为 type 的类型别名，反之则为空

    template<typename T>
    typename std::enable_if<std::is_integral<T>::value, T>::type
    Add(T a, T b);
    template<typename T>
    typename std::enable_if<!std::is_integral<T>::value, T>::type
    Add(T a, T b);

    std::enable_if_t 是 std::enable_if 的简化写法，等价于 typename std::enable_if<B, T>::type
    template<typename T>
    std::enable_if_t<std::is_integral_v<T>, T> myFunction(T value) {
        return value * 2; // 仅在 T 是整数类型时可用
    }
    
    template <typename C> constexpr bool is_condition_task_v = std::is_invocable_r_v<int, C>;
    std::is_invocable_r:这是一个类型特征，用于检查给定的可调用对象（如函数、函数指针、lambda 等）是否可以被调用，且其返回类型符合指定类型。std::is_invocable_r_v简化
    void func() {}
    int func_with_return() { return 42;  }
    template <typename C>
    void check_invocable() {
        if constexpr (std::is_invocable_r_v<int, C>) { //<A, C>  A是是C是否返回的类型可以转换成A , C是一个func或函数指针是否可以被调用就是是一个函数
            std::cout << "C is invocable and returns int.\n";
        } else {
            std::cout << "C is not invocable or does not return int.\n";
        }
    }
    check_invocable<void(*)()>(); // 输出: C is not invocable or does not return int.
    check_invocable<decltype(func_with_return)>(); // 输出: C is invocable and returns int.
                                                   //

    模板：is_protobuf_message 是一个模板结构体，用于检测类型 T 是否是 google::protobuf::Message 的子类。
    std::is_base_of：这是一个类型特征，检查 T 是否是 google::protobuf::Message 的派生类。如果是，则返回 true，否则返回 false。
    std::integral_constant<bool, ...>：这个模板用于将结果封装为常量值，方便在编译时使用。
    template <typename T>
    struct is_protobuf_message
        : std::integral_constant<bool,
              std::is_base_of<google::protobuf::Message, T>::value> {};

    template <typename T>
    inline constexpr bool is_protobuf_message_v = is_protobuf_message<T>::value;
   * */

  template <typename C, std::enable_if_t<is_static_task_v<C>, void>* = nullptr >
  Task emplace(C&& callable);
  
  template <typename C,
    std::enable_if_t<is_runtime_task_v<C>, void>* = nullptr
  >
  Task emplace(C&& callable);  // 模版上 <>*= nullptr模板参数是一个指针类型的默认参数，默认为 nullptr 
    // std::is_invocable_r_v<void, C, Runtime&>:
    //std::is_invocable_r 是一个类型特征，用于检查给定的可调用对象 C 是否可以被调用，并且其返回类型是否可以转换为 void。
    //void 是期望的返回类型。
    //Runtime& 是 C 被调用时所需的参数类型。

  template <typename C,
    std::enable_if_t<is_subflow_task_v<C>, void>* = nullptr
  >
  Task emplace(C&& callable);

  template <typename C,
    std::enable_if_t<is_condition_task_v<C>, void>* = nullptr
  >
  Task emplace(C&& callable);

  template <typename C,
    std::enable_if_t<is_multi_condition_task_v<C>, void>* = nullptr
  >
  Task emplace(C&& callable);

  template <typename... C, std::enable_if_t<(sizeof...(C)>1), void>* = nullptr>
  auto emplace(C&&... callables);

  void erase(Task task);

  template <typename T>
  Task composed_of(T& object);

  Task placeholder();

  void linearize(std::vector<Task>& tasks);

  void linearize(std::initializer_list<Task> tasks);

  template <typename B, typename E, typename C, typename P = DefaultPartitioner>
  Task for_each(B first, E last, C callable, P part = P());
  
  template <typename B, typename E, typename S, typename C, typename P = DefaultPartitioner>
  Task for_each_index(B first, E last, S step, C callable, P part = P());

  template <typename R, typename C, typename P = DefaultPartitioner>
  Task for_each_by_index(R range, C callable, P part = P());

  template <
    typename B, typename E, typename O, typename C, typename P = DefaultPartitioner,
    std::enable_if_t<is_partitioner_v<std::decay_t<P>>, void>* = nullptr
  >
  Task transform(B first1, E last1, O d_first, C c, P part = P());
  
  template <
    typename B1, typename E1, typename B2, typename O, typename C, typename P=DefaultPartitioner,
    std::enable_if_t<!is_partitioner_v<std::decay_t<C>>, void>* = nullptr
  >
  Task transform(B1 first1, E1 last1, B2 first2, O d_first, C c, P part = P());
  
  template <typename B, typename E, typename T, typename O, typename P = DefaultPartitioner>
  Task reduce(B first, E last, T& init, O bop, P part = P());
  /* example parallel_reduce.cpp 如果数字小还不如不用 当数字大到一定程度的时候在用
(manage:hm) root@shjd-sycpb-public-03::dys:~/taskflow/build/examples# ./parallel_reduce reduce 1000
Benchmark: reduce
[sequential] reduce: 0 us
[taskflow] reduce: 2761 us
(manage:hm) root@shjd-sycpb-public-03::dys:~/taskflow/build/examples# ./parallel_reduce reduce 100000
Benchmark: reduce
[sequential] reduce: 30 us
[taskflow] reduce: 3172 us
(manage:hm) root@shjd-sycpb-public-03::dys:~/taskflow/build/examples# ./parallel_reduce reduce 1000000
Benchmark: reduce
[sequential] reduce: 346 us
[taskflow] reduce: 4136 us
(manage:hm) root@shjd-sycpb-public-03::dys:~/taskflow/build/examples# ./parallel_reduce reduce 10000000
Benchmark: reduce
[sequential] reduce: 3911 us
[taskflow] reduce: 4045 us
(manage:hm) root@shjd-sycpb-public-03::dys:~/taskflow/build/examples# ./parallel_reduce reduce 100000000
Benchmark: reduce
[sequential] reduce: 39221 us
[taskflow] reduce: 12183 us
*/

  template <typename R, typename T, typename L, typename G, typename P = DefaultPartitioner>
  Task reduce_by_index(R range, T& init, L lop, G gop, P part = P());
  
  template <
    typename B, typename E, typename T, typename BOP, typename UOP, typename P = DefaultPartitioner,
    std::enable_if_t<is_partitioner_v<std::decay_t<P>>, void>* = nullptr
  >
  Task transform_reduce(B first, E last, T& init, BOP bop, UOP uop, P part = P());

  template <
    typename B1, typename E1, typename B2, typename T, typename BOP_R, typename BOP_T, 
    typename P = DefaultPartitioner,
    std::enable_if_t<!is_partitioner_v<std::decay_t<BOP_T>>, void>* = nullptr
  >
  Task transform_reduce(
    B1 first1, E1 last1, B2 first2, T& init, BOP_R bop_r, BOP_T bop_t, P part = P()
  );

  template <typename B, typename E, typename D, typename BOP>
  Task inclusive_scan(B first, E last, D d_first, BOP bop);
  
  template <typename B, typename E, typename D, typename BOP, typename T>
  Task inclusive_scan(B first, E last, D d_first, BOP bop, T init);
  
  template <typename B, typename E, typename D, typename T, typename BOP>
  Task exclusive_scan(B first, E last, D d_first, T init, BOP bop);
  
  template <typename B, typename E, typename D, typename BOP, typename UOP>
  Task transform_inclusive_scan(B first, E last, D d_first, BOP bop, UOP uop);
  
  template <typename B, typename E, typename D, typename BOP, typename UOP, typename T>
  Task transform_inclusive_scan(B first, E last, D d_first, BOP bop, UOP uop, T init);
  
  template <typename B, typename E, typename D, typename T, typename BOP, typename UOP>
  Task transform_exclusive_scan(B first, E last, D d_first, T init, BOP bop, UOP uop);

  template <typename B, typename E, typename T, typename UOP, typename P = DefaultPartitioner>
  Task find_if(B first, E last, T &result, UOP predicate, P part = P());

  template <typename B, typename E, typename T, typename UOP, typename P = DefaultPartitioner>
  Task find_if_not(B first, E last, T &result, UOP predicate, P part = P());

  template <typename B, typename E, typename T, typename C, typename P>
  Task min_element(B first, E last, T& result, C comp, P part);
  
  template <typename B, typename E, typename T, typename C, typename P>
  Task max_element(B first, E last, T& result, C comp, P part);

  template <typename B, typename E, typename C>
  Task sort(B first, E last, C cmp);

  template <typename B, typename E>
  Task sort(B first, E last);

  protected:

  /**
  @brief associated graph object
  */
  Graph& _graph;

  private:

  template <typename L>
  void _linearize(L&);
};

// Constructor
inline FlowBuilder::FlowBuilder(Graph& graph) :
  _graph {graph} {
}

// Function: emplace
template <typename C, std::enable_if_t<is_static_task_v<C>, void>*>
Task FlowBuilder::emplace(C&& c) {
  return Task(_graph._emplace_back(NSTATE::NONE, ESTATE::NONE, DefaultTaskParams{}, nullptr, nullptr, 0,
    std::in_place_type_t<Node::Static>{}, std::forward<C>(c)
  ));
}
// std::in_place_type_t 是 C++ 标准库中的一个类型，用于支持“就地构造”（in-place construction）的功能。
// 它主要与 std::optional 和 std::variant 等类型结合使用，以便在构造这些类型的对象时，能够直接在目标存储空间中构造所需的对象，而不需要额外的临时对象。
// std::variant<int, std::string> myVariant{std::in_place_type<std::string>, "Hello, World!"};

// Function: emplace
template <typename C, std::enable_if_t<is_runtime_task_v<C>, void>*>
Task FlowBuilder::emplace(C&& c) {
  return Task(_graph._emplace_back(NSTATE::NONE, ESTATE::NONE, DefaultTaskParams{}, nullptr, nullptr, 0,
    std::in_place_type_t<Node::Runtime>{}, std::forward<C>(c)
  ));
}

// Function: emplace
template <typename C, std::enable_if_t<is_subflow_task_v<C>, void>*>
Task FlowBuilder::emplace(C&& c) {
  return Task(_graph._emplace_back(NSTATE::NONE, ESTATE::NONE, DefaultTaskParams{}, nullptr, nullptr, 0,
    std::in_place_type_t<Node::Subflow>{}, std::forward<C>(c)
  ));
}

// Function: emplace
template <typename C, std::enable_if_t<is_condition_task_v<C>, void>*>
Task FlowBuilder::emplace(C&& c) {
  return Task(_graph._emplace_back(NSTATE::NONE, ESTATE::NONE, DefaultTaskParams{}, nullptr, nullptr, 0,
    std::in_place_type_t<Node::Condition>{}, std::forward<C>(c)
  ));
}

// Function: emplace
template <typename C, std::enable_if_t<is_multi_condition_task_v<C>, void>*>
Task FlowBuilder::emplace(C&& c) {
  return Task(_graph._emplace_back(NSTATE::NONE, ESTATE::NONE, DefaultTaskParams{}, nullptr, nullptr, 0,
    std::in_place_type_t<Node::MultiCondition>{}, std::forward<C>(c)
  ));
}

// Function: composed_of
template <typename T>
Task FlowBuilder::composed_of(T& object) {
  auto node = _graph._emplace_back(NSTATE::NONE, ESTATE::NONE, DefaultTaskParams{}, nullptr, nullptr, 0,
    std::in_place_type_t<Node::Module>{}, object
  );
  return Task(node);
}

// Function: placeholder
inline Task FlowBuilder::placeholder() {
  auto node = _graph._emplace_back(NSTATE::NONE, ESTATE::NONE, DefaultTaskParams{}, nullptr, nullptr, 0,
    std::in_place_type_t<Node::Placeholder>{}
  );
  return Task(node);
}

// Function: emplace
template <typename... C, std::enable_if_t<(sizeof...(C)>1), void>*>
auto FlowBuilder::emplace(C&&... cs) {
  return std::make_tuple(emplace(std::forward<C>(cs))...);
}

// Function: erase
inline void FlowBuilder::erase(Task task) {

  if (!task._node) {
    return;
  }

  // 要erase 结点边里面 要反着remove 如果该结点是边对面结点的前驱， 要删掉对面结点的predecesor 
  for(size_t i=0; i<task._node->_num_successors; ++i) {
    task._node->_edges[i]->_remove_predecessors(task._node);
  }

  // 要erase 结点边里面 要反着remove 如果该结点是边对面结点的后驱， 要删掉对面结点的后继 
  for(size_t i=task._node->_num_successors; i<task._node->_edges.size(); ++i) {
    task._node->_edges[i]->_remove_successors(task._node);
  }

  _graph._erase(task._node);
}


// Procedure: _linearize
template <typename L>
void FlowBuilder::_linearize(L& keys) {

  auto itr = keys.begin();
  auto end = keys.end();

  if(itr == end) {
    return;
  }

  auto nxt = itr;

  for(++nxt; nxt != end; ++nxt, ++itr) {
    itr->_node->_precede(nxt->_node);
  }
}

// Procedure: linearize
inline void FlowBuilder::linearize(std::vector<Task>& keys) {
  _linearize(keys);
}

// Procedure: linearize
inline void FlowBuilder::linearize(std::initializer_list<Task> keys) {
  _linearize(keys);
}

class Subflow : public FlowBuilder {

  friend class Executor;
  friend class FlowBuilder;

  public:
    
    void join();

    bool joinable() const noexcept;

    /**
    @brief acquires the associated executor
    */
    Executor& executor() noexcept;
    
    /**
    @brief acquires the associated graph
    */
    Graph& graph() { return _graph; }
    
    /**
    @brief specifies whether to keep the subflow after it is joined

    @param flag `true` to retain the subflow after it is joined; `false` to discard it

    By default, the runtime automatically clears a spawned subflow once it is joined.
    Setting this flag to `true` allows the application to retain the subflow's structure 
    for post-execution analysis like visualization.
    */
    void retain(bool flag) noexcept;

    /**
    @brief queries if the subflow will be retained after it is joined
    @return `true` if the subflow will be retained after it is joined; `false` otherwise
    */
    bool retain() const;

  private:
    
    Subflow(Executor&, Worker&, Node*, Graph&);
    
    Subflow() = delete;
    Subflow(const Subflow&) = delete;
    Subflow(Subflow&&) = delete;

    Executor& _executor;
    Worker& _worker;
    Node* _parent;
};

// Constructor
inline Subflow::Subflow(Executor& executor, Worker& worker, Node* parent, Graph& graph) :
  FlowBuilder {graph}, 
  _executor   {executor}, 
  _worker     {worker}, 
  _parent     {parent} {
  
  // need to reset since there could have iterative control flow
  _parent->_nstate &= ~(NSTATE::JOINED_SUBFLOW | NSTATE::RETAIN_SUBFLOW);

  // clear the graph
  graph.clear();
}

// Function: joinable
inline bool Subflow::joinable() const noexcept {
  return !(_parent->_nstate & NSTATE::JOINED_SUBFLOW);
}

// Function: executor
inline Executor& Subflow::executor() noexcept {
  return _executor;
}

// Function: retain
inline void Subflow::retain(bool flag) noexcept {
  // default value is not to retain 
  if TF_LIKELY(flag == true) {
    _parent->_nstate |= NSTATE::RETAIN_SUBFLOW;
  }
  else {
    _parent->_nstate &= ~NSTATE::RETAIN_SUBFLOW;
  }

  //_parent->_nstate = (_parent->_nstate & ~NSTATE::RETAIN_SUBFLOW) | 
  //                   (-static_cast<int>(flag) & NSTATE::RETAIN_SUBFLOW);
}

// Function: retain
inline bool Subflow::retain() const {
  return _parent->_nstate & NSTATE::RETAIN_SUBFLOW;
}

}  // end of namespace tf. ---------------------------------------------------
